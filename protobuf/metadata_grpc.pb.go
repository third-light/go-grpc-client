// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	// Delete the metadata for the tag for the item.
	DeleteMetadataValues(ctx context.Context, in *MetadataRequests_DeleteMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error)
	// Get the details of the metadata field with the given ID
	GetField(ctx context.Context, in *MetadataRequests_GetField, opts ...grpc.CallOption) (*Field, error)
	// Get the details of the metadata field with the given ID
	GetFieldMulti(ctx context.Context, in *MetadataRequests_GetFieldMulti, opts ...grpc.CallOption) (*MetadataResponses_GetFieldMulti, error)
	// Get the tags names of the metadata fields available for the item
	GetMetadataFields(ctx context.Context, in *MetadataRequests_GetMetadataFields, opts ...grpc.CallOption) (*MetadataResponses_GetMetadataFields, error)
	// Get the IDs of the metadata panels available for the item
	GetMetadataPanels(ctx context.Context, in *MetadataRequests_GetMetadataPanels, opts ...grpc.CallOption) (*MetadataResponses_GetMetadataPanels, error)
	// Get the details of the metadata for the tag for the item
	GetMetadataValues(ctx context.Context, in *MetadataRequests_GetMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error)
	// Get the details of the metadata panel with the given ID
	GetPanel(ctx context.Context, in *MetadataRequests_GetPanel, opts ...grpc.CallOption) (*Panel, error)
	// Get the details of the metadata panel with the given ID
	GetPanelMulti(ctx context.Context, in *MetadataRequests_GetPanelMulti, opts ...grpc.CallOption) (*MetadataResponses_GetPanelMulti, error)
	// Get the details of the vocab for the metadata tag for the current profile
	GetProfileVocab(ctx context.Context, in *MetadataRequests_GetProfileVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Get the details of the vocab for the metadata tag for the site
	GetSiteVocab(ctx context.Context, in *MetadataRequests_GetSiteVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Get the details of the vocab for the metadata tag for the space
	GetSpaceVocab(ctx context.Context, in *MetadataRequests_GetSpaceVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Replace the metadata for the metadata tag for the item
	ReplaceMetadataValues(ctx context.Context, in *MetadataRequests_ReplaceMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error)
	// Amend the details of the vocab for user profile for the given metadata.
	ReplaceProfileVocab(ctx context.Context, in *MetadataRequests_ReplaceProfileVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Amend the details of the vocab for the given metadata for the site.
	ReplaceSiteVocab(ctx context.Context, in *MetadataRequests_ReplaceSiteVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Amend the details of the vocab for the given metadata.
	ReplaceSpaceVocab(ctx context.Context, in *MetadataRequests_ReplaceSpaceVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Update the details of the metadata for the tag for the item. If called on a single value field, it will
	// replace the metadata, otherwise it will add it.
	UpdateMetadataValues(ctx context.Context, in *MetadataRequests_UpdateMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error)
	// Amend the details of the vocab for the metadata in the profile of the current user. Existing vocab values
	// which are not specified are not removed.
	UpdateProfileVocab(ctx context.Context, in *MetadataRequests_UpdateProfileVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Amend the details of the vocab for the site metadata. Existing vocab values
	// which are not specified are not removed.
	UpdateSiteVocab(ctx context.Context, in *MetadataRequests_UpdateSiteVocab, opts ...grpc.CallOption) (*Vocab, error)
	// Amend the details of the vocab for the given metadata. Existing vocab values
	// which are not specified are not removed.
	UpdateSpaceVocab(ctx context.Context, in *MetadataRequests_UpdateSpaceVocab, opts ...grpc.CallOption) (*Vocab, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) DeleteMetadataValues(ctx context.Context, in *MetadataRequests_DeleteMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error) {
	out := new(MetadataValue)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/DeleteMetadataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetField(ctx context.Context, in *MetadataRequests_GetField, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetFieldMulti(ctx context.Context, in *MetadataRequests_GetFieldMulti, opts ...grpc.CallOption) (*MetadataResponses_GetFieldMulti, error) {
	out := new(MetadataResponses_GetFieldMulti)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetFieldMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetMetadataFields(ctx context.Context, in *MetadataRequests_GetMetadataFields, opts ...grpc.CallOption) (*MetadataResponses_GetMetadataFields, error) {
	out := new(MetadataResponses_GetMetadataFields)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetMetadataFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetMetadataPanels(ctx context.Context, in *MetadataRequests_GetMetadataPanels, opts ...grpc.CallOption) (*MetadataResponses_GetMetadataPanels, error) {
	out := new(MetadataResponses_GetMetadataPanels)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetMetadataPanels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetMetadataValues(ctx context.Context, in *MetadataRequests_GetMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error) {
	out := new(MetadataValue)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetMetadataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetPanel(ctx context.Context, in *MetadataRequests_GetPanel, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetPanelMulti(ctx context.Context, in *MetadataRequests_GetPanelMulti, opts ...grpc.CallOption) (*MetadataResponses_GetPanelMulti, error) {
	out := new(MetadataResponses_GetPanelMulti)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetPanelMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetProfileVocab(ctx context.Context, in *MetadataRequests_GetProfileVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetProfileVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetSiteVocab(ctx context.Context, in *MetadataRequests_GetSiteVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetSiteVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetSpaceVocab(ctx context.Context, in *MetadataRequests_GetSpaceVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/GetSpaceVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) ReplaceMetadataValues(ctx context.Context, in *MetadataRequests_ReplaceMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error) {
	out := new(MetadataValue)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/ReplaceMetadataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) ReplaceProfileVocab(ctx context.Context, in *MetadataRequests_ReplaceProfileVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/ReplaceProfileVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) ReplaceSiteVocab(ctx context.Context, in *MetadataRequests_ReplaceSiteVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/ReplaceSiteVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) ReplaceSpaceVocab(ctx context.Context, in *MetadataRequests_ReplaceSpaceVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/ReplaceSpaceVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) UpdateMetadataValues(ctx context.Context, in *MetadataRequests_UpdateMetadataValues, opts ...grpc.CallOption) (*MetadataValue, error) {
	out := new(MetadataValue)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/UpdateMetadataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) UpdateProfileVocab(ctx context.Context, in *MetadataRequests_UpdateProfileVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/UpdateProfileVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) UpdateSiteVocab(ctx context.Context, in *MetadataRequests_UpdateSiteVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/UpdateSiteVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) UpdateSpaceVocab(ctx context.Context, in *MetadataRequests_UpdateSpaceVocab, opts ...grpc.CallOption) (*Vocab, error) {
	out := new(Vocab)
	err := c.cc.Invoke(ctx, "/chorus.Metadata/UpdateSpaceVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
