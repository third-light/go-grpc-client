// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadsClient is the client API for Uploads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadsClient interface {
	// Create an upload session to allow uploading of files into Chorus. Once all files have been transferred, then
	// the upload should be finished using the `finish` method.
	Create(ctx context.Context, in *UploadsRequests_Create, opts ...grpc.CallOption) (*UploadDetails, error)
	// Mark an upload as finished.
	Finish(ctx context.Context, in *UploadsRequests_Finish, opts ...grpc.CallOption) (*UploadDetails, error)
	// Get details about an upload.
	Get(ctx context.Context, in *UploadsRequests_Get, opts ...grpc.CallOption) (*UploadDetails, error)
}

type uploadsClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadsClient(cc grpc.ClientConnInterface) UploadsClient {
	return &uploadsClient{cc}
}

func (c *uploadsClient) Create(ctx context.Context, in *UploadsRequests_Create, opts ...grpc.CallOption) (*UploadDetails, error) {
	out := new(UploadDetails)
	err := c.cc.Invoke(ctx, "/chorus.Uploads/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadsClient) Finish(ctx context.Context, in *UploadsRequests_Finish, opts ...grpc.CallOption) (*UploadDetails, error) {
	out := new(UploadDetails)
	err := c.cc.Invoke(ctx, "/chorus.Uploads/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadsClient) Get(ctx context.Context, in *UploadsRequests_Get, opts ...grpc.CallOption) (*UploadDetails, error) {
	out := new(UploadDetails)
	err := c.cc.Invoke(ctx, "/chorus.Uploads/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
