// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	// Attach one or more files to another file.
	Attach(ctx context.Context, in *FilesRequests_Attach, opts ...grpc.CallOption) (*FilesResponses_Attach, error)
	// Delete any existing Direct URL (temporary or permanent) for the given file.
	DeleteDirectUrl(ctx context.Context, in *FilesRequests_DeleteDirectUrl, opts ...grpc.CallOption) (*FilesResponses_DeleteDirectUrl, error)
	// Break the attachment between two files.
	Detach(ctx context.Context, in *FilesRequests_Detach, opts ...grpc.CallOption) (*FilesResponses_Detach, error)
	// Remove all attached files from an asset.
	DetachAll(ctx context.Context, in *FilesRequests_DetachAll, opts ...grpc.CallOption) (*FilesResponses_DetachAll, error)
	// Retrieve details for a particular file.
	Get(ctx context.Context, in *FilesRequests_Get, opts ...grpc.CallOption) (*FileDetails, error)
	// Get the files attached to a given one
	GetAttachments(ctx context.Context, in *FilesRequests_GetAttachments, opts ...grpc.CallOption) (*FilesResponses_GetAttachments, error)
	// Get a permanent Direct URL for the given file.
	GetDirectUrl(ctx context.Context, in *FilesRequests_GetDirectUrl, opts ...grpc.CallOption) (*FilesResponses_GetDirectUrl, error)
	// Retrieve details for a particular file link.
	GetLink(ctx context.Context, in *FilesRequests_GetLink, opts ...grpc.CallOption) (*FileLinkDetails, error)
	// Retrieve details for a particular file link.
	GetLinkMulti(ctx context.Context, in *FilesRequests_GetLinkMulti, opts ...grpc.CallOption) (*FilesResponses_GetLinkMulti, error)
	// Gets the metadata for a file.
	GetMetadata(ctx context.Context, in *FilesRequests_GetMetadata, opts ...grpc.CallOption) (*MetadataValueMap, error)
	// Retrieve details for a particular file.
	GetMulti(ctx context.Context, in *FilesRequests_GetMulti, opts ...grpc.CallOption) (*FilesResponses_GetMulti, error)
	// Get a temporary Direct URL for the given file.
	GetTemporaryDirectUrl(ctx context.Context, in *FilesRequests_GetTemporaryDirectUrl, opts ...grpc.CallOption) (*FilesResponses_GetTemporaryDirectUrl, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) Attach(ctx context.Context, in *FilesRequests_Attach, opts ...grpc.CallOption) (*FilesResponses_Attach, error) {
	out := new(FilesResponses_Attach)
	err := c.cc.Invoke(ctx, "/chorus.Files/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DeleteDirectUrl(ctx context.Context, in *FilesRequests_DeleteDirectUrl, opts ...grpc.CallOption) (*FilesResponses_DeleteDirectUrl, error) {
	out := new(FilesResponses_DeleteDirectUrl)
	err := c.cc.Invoke(ctx, "/chorus.Files/DeleteDirectUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Detach(ctx context.Context, in *FilesRequests_Detach, opts ...grpc.CallOption) (*FilesResponses_Detach, error) {
	out := new(FilesResponses_Detach)
	err := c.cc.Invoke(ctx, "/chorus.Files/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DetachAll(ctx context.Context, in *FilesRequests_DetachAll, opts ...grpc.CallOption) (*FilesResponses_DetachAll, error) {
	out := new(FilesResponses_DetachAll)
	err := c.cc.Invoke(ctx, "/chorus.Files/DetachAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Get(ctx context.Context, in *FilesRequests_Get, opts ...grpc.CallOption) (*FileDetails, error) {
	out := new(FileDetails)
	err := c.cc.Invoke(ctx, "/chorus.Files/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetAttachments(ctx context.Context, in *FilesRequests_GetAttachments, opts ...grpc.CallOption) (*FilesResponses_GetAttachments, error) {
	out := new(FilesResponses_GetAttachments)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetDirectUrl(ctx context.Context, in *FilesRequests_GetDirectUrl, opts ...grpc.CallOption) (*FilesResponses_GetDirectUrl, error) {
	out := new(FilesResponses_GetDirectUrl)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetDirectUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetLink(ctx context.Context, in *FilesRequests_GetLink, opts ...grpc.CallOption) (*FileLinkDetails, error) {
	out := new(FileLinkDetails)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetLinkMulti(ctx context.Context, in *FilesRequests_GetLinkMulti, opts ...grpc.CallOption) (*FilesResponses_GetLinkMulti, error) {
	out := new(FilesResponses_GetLinkMulti)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetLinkMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetMetadata(ctx context.Context, in *FilesRequests_GetMetadata, opts ...grpc.CallOption) (*MetadataValueMap, error) {
	out := new(MetadataValueMap)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetMulti(ctx context.Context, in *FilesRequests_GetMulti, opts ...grpc.CallOption) (*FilesResponses_GetMulti, error) {
	out := new(FilesResponses_GetMulti)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetTemporaryDirectUrl(ctx context.Context, in *FilesRequests_GetTemporaryDirectUrl, opts ...grpc.CallOption) (*FilesResponses_GetTemporaryDirectUrl, error) {
	out := new(FilesResponses_GetTemporaryDirectUrl)
	err := c.cc.Invoke(ctx, "/chorus.Files/GetTemporaryDirectUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
