// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiKeysClient is the client API for ApiKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeysClient interface {
	// Create a new profile API key with the supplied label
	CreateProfileKey(ctx context.Context, in *ApiKeysRequests_CreateProfileKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error)
	// Create a new site API key with the supplied label
	CreateSiteKey(ctx context.Context, in *ApiKeysRequests_CreateSiteKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error)
	// Create a new space API key with the supplied label
	CreateSpacesKey(ctx context.Context, in *ApiKeysRequests_CreateSpacesKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error)
	// Delete the specified API key
	Delete(ctx context.Context, in *ApiKeysRequests_Delete, opts ...grpc.CallOption) (*ApiKeysResponses_Delete, error)
	// Returns details about API keys
	Get(ctx context.Context, in *ApiKeysRequests_Get, opts ...grpc.CallOption) (*ApiKeyDetails, error)
	// Returns details about API keys
	GetMulti(ctx context.Context, in *ApiKeysRequests_GetMulti, opts ...grpc.CallOption) (*ApiKeysResponses_GetMulti, error)
	// Retrieve a list of API key IDs configured for this user
	GetProfileKeys(ctx context.Context, in *ApiKeysRequests_GetProfileKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetProfileKeys, error)
	// Retrieve a list of API key IDs configured for the site
	GetSiteKeys(ctx context.Context, in *ApiKeysRequests_GetSiteKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetSiteKeys, error)
	// Retrieve a list of API key IDs configured for this user
	GetSpacesKeys(ctx context.Context, in *ApiKeysRequests_GetSpacesKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetSpacesKeys, error)
	// Update the details of an API key
	Set(ctx context.Context, in *ApiKeysRequests_Set, opts ...grpc.CallOption) (*ApiKeyDetails, error)
}

type apiKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeysClient(cc grpc.ClientConnInterface) ApiKeysClient {
	return &apiKeysClient{cc}
}

func (c *apiKeysClient) CreateProfileKey(ctx context.Context, in *ApiKeysRequests_CreateProfileKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error) {
	out := new(ApiKeyDetailsWithToken)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/CreateProfileKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) CreateSiteKey(ctx context.Context, in *ApiKeysRequests_CreateSiteKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error) {
	out := new(ApiKeyDetailsWithToken)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/CreateSiteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) CreateSpacesKey(ctx context.Context, in *ApiKeysRequests_CreateSpacesKey, opts ...grpc.CallOption) (*ApiKeyDetailsWithToken, error) {
	out := new(ApiKeyDetailsWithToken)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/CreateSpacesKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Delete(ctx context.Context, in *ApiKeysRequests_Delete, opts ...grpc.CallOption) (*ApiKeysResponses_Delete, error) {
	out := new(ApiKeysResponses_Delete)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Get(ctx context.Context, in *ApiKeysRequests_Get, opts ...grpc.CallOption) (*ApiKeyDetails, error) {
	out := new(ApiKeyDetails)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetMulti(ctx context.Context, in *ApiKeysRequests_GetMulti, opts ...grpc.CallOption) (*ApiKeysResponses_GetMulti, error) {
	out := new(ApiKeysResponses_GetMulti)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/GetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetProfileKeys(ctx context.Context, in *ApiKeysRequests_GetProfileKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetProfileKeys, error) {
	out := new(ApiKeysResponses_GetProfileKeys)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/GetProfileKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetSiteKeys(ctx context.Context, in *ApiKeysRequests_GetSiteKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetSiteKeys, error) {
	out := new(ApiKeysResponses_GetSiteKeys)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/GetSiteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetSpacesKeys(ctx context.Context, in *ApiKeysRequests_GetSpacesKeys, opts ...grpc.CallOption) (*ApiKeysResponses_GetSpacesKeys, error) {
	out := new(ApiKeysResponses_GetSpacesKeys)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/GetSpacesKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Set(ctx context.Context, in *ApiKeysRequests_Set, opts ...grpc.CallOption) (*ApiKeyDetails, error) {
	out := new(ApiKeyDetails)
	err := c.cc.Invoke(ctx, "/chorus.ApiKeys/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
