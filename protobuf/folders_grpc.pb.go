// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoldersClient is the client API for Folders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoldersClient interface {
	// Get details about a given folder.
	Get(ctx context.Context, in *FoldersRequests_Get, opts ...grpc.CallOption) (*FolderDetails, error)
	// Get all the files for a given parent folder.
	GetChildFiles(ctx context.Context, in *FoldersRequests_GetChildFiles, opts ...grpc.CallOption) (*FoldersResponses_GetChildFiles, error)
	// Get all the sub folders for a given parent folder.
	GetChildFolders(ctx context.Context, in *FoldersRequests_GetChildFolders, opts ...grpc.CallOption) (*FoldersResponses_GetChildFolders, error)
	// Get details of a link to a folder
	// If `linkId` is specified as an array, the return hash will be nested in a hash keyed by the link ID.
	GetLink(ctx context.Context, in *FoldersRequests_GetLink, opts ...grpc.CallOption) (*FolderLinkDetails, error)
	// Get details of a link to a folder
	// If `linkId` is specified as an array, the return hash will be nested in a hash keyed by the link ID.
	GetLinkMulti(ctx context.Context, in *FoldersRequests_GetLinkMulti, opts ...grpc.CallOption) (*FoldersResponses_GetLinkMulti, error)
	// Get details about a given folder.
	GetMulti(ctx context.Context, in *FoldersRequests_GetMulti, opts ...grpc.CallOption) (*FoldersResponses_GetMulti, error)
	// Set details on a folder. Allows setting the search parameters for a Smart Folder.
	Set(ctx context.Context, in *FoldersRequests_Set, opts ...grpc.CallOption) (*FolderDetails, error)
}

type foldersClient struct {
	cc grpc.ClientConnInterface
}

func NewFoldersClient(cc grpc.ClientConnInterface) FoldersClient {
	return &foldersClient{cc}
}

func (c *foldersClient) Get(ctx context.Context, in *FoldersRequests_Get, opts ...grpc.CallOption) (*FolderDetails, error) {
	out := new(FolderDetails)
	err := c.cc.Invoke(ctx, "/chorus.Folders/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) GetChildFiles(ctx context.Context, in *FoldersRequests_GetChildFiles, opts ...grpc.CallOption) (*FoldersResponses_GetChildFiles, error) {
	out := new(FoldersResponses_GetChildFiles)
	err := c.cc.Invoke(ctx, "/chorus.Folders/GetChildFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) GetChildFolders(ctx context.Context, in *FoldersRequests_GetChildFolders, opts ...grpc.CallOption) (*FoldersResponses_GetChildFolders, error) {
	out := new(FoldersResponses_GetChildFolders)
	err := c.cc.Invoke(ctx, "/chorus.Folders/GetChildFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) GetLink(ctx context.Context, in *FoldersRequests_GetLink, opts ...grpc.CallOption) (*FolderLinkDetails, error) {
	out := new(FolderLinkDetails)
	err := c.cc.Invoke(ctx, "/chorus.Folders/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) GetLinkMulti(ctx context.Context, in *FoldersRequests_GetLinkMulti, opts ...grpc.CallOption) (*FoldersResponses_GetLinkMulti, error) {
	out := new(FoldersResponses_GetLinkMulti)
	err := c.cc.Invoke(ctx, "/chorus.Folders/GetLinkMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) GetMulti(ctx context.Context, in *FoldersRequests_GetMulti, opts ...grpc.CallOption) (*FoldersResponses_GetMulti, error) {
	out := new(FoldersResponses_GetMulti)
	err := c.cc.Invoke(ctx, "/chorus.Folders/GetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersClient) Set(ctx context.Context, in *FoldersRequests_Set, opts ...grpc.CallOption) (*FolderDetails, error) {
	out := new(FolderDetails)
	err := c.cc.Invoke(ctx, "/chorus.Folders/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
