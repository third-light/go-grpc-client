// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	// Returns the environment settings for the current user; useful for initial configuration
	// of a UI or API based application.
	GetEnvironment(ctx context.Context, in *CoreRequests_GetEnvironment, opts ...grpc.CallOption) (*EnvironmentDetails, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) GetEnvironment(ctx context.Context, in *CoreRequests_GetEnvironment, opts ...grpc.CallOption) (*EnvironmentDetails, error) {
	out := new(EnvironmentDetails)
	err := c.cc.Invoke(ctx, "/chorus.Core/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
