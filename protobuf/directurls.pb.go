// This is a protobuf specifications for the DirectUrls module of the Third Light gRPC API for Chorus.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: directurls.proto

package protobuf

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Representation of the possible file formats that can be requested for a Direct URL.
type DirectUrlSettings_FileFormat int32

const (
	// The created link will have the same format as the original.
	DirectUrlSettings_ORIGINAL DirectUrlSettings_FileFormat = 0
	// The created link will be for a 'JPG' version of the file.
	DirectUrlSettings_JPG DirectUrlSettings_FileFormat = 1
	// The created link will be for a 'GIF' version of the file.
	DirectUrlSettings_GIF DirectUrlSettings_FileFormat = 2
	// The created link will be for a 'PNG' version of the file.
	DirectUrlSettings_PNG DirectUrlSettings_FileFormat = 3
	// The created link will be for a 'TIF' version of the file.
	DirectUrlSettings_TIF DirectUrlSettings_FileFormat = 4
	// The created link will be one of 'JPG', 'GIF' or 'PNG'. Exactly which will be based on the type of the
	// original file.
	DirectUrlSettings_WEB DirectUrlSettings_FileFormat = 5
)

// Enum value maps for DirectUrlSettings_FileFormat.
var (
	DirectUrlSettings_FileFormat_name = map[int32]string{
		0: "ORIGINAL",
		1: "JPG",
		2: "GIF",
		3: "PNG",
		4: "TIF",
		5: "WEB",
	}
	DirectUrlSettings_FileFormat_value = map[string]int32{
		"ORIGINAL": 0,
		"JPG":      1,
		"GIF":      2,
		"PNG":      3,
		"TIF":      4,
		"WEB":      5,
	}
)

func (x DirectUrlSettings_FileFormat) Enum() *DirectUrlSettings_FileFormat {
	p := new(DirectUrlSettings_FileFormat)
	*p = x
	return p
}

func (x DirectUrlSettings_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectUrlSettings_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_directurls_proto_enumTypes[0].Descriptor()
}

func (DirectUrlSettings_FileFormat) Type() protoreflect.EnumType {
	return &file_directurls_proto_enumTypes[0]
}

func (x DirectUrlSettings_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectUrlSettings_FileFormat.Descriptor instead.
func (DirectUrlSettings_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_directurls_proto_rawDescGZIP(), []int{0, 0}
}

// Representation of the 'fit mode' for a requested crop. This is the strategy to use when the requested crop's dimensions
// don't match the output dimensions or aspect ratio.
type DirectUrlSettings_FitMode int32

const (
	// Scale the resultant image so that both dimensions are at least the size requested
	DirectUrlSettings_SCALE DirectUrlSettings_FitMode = 0
	// Stretch the resultant image so that it is exactly the supplied size
	DirectUrlSettings_STRETCH DirectUrlSettings_FitMode = 1
	// Crop the resultant image such that it does not exceed the desired dimensions
	DirectUrlSettings_CROP DirectUrlSettings_FitMode = 2
	// Pad the image with whitespace so that it is exactly the supplied dimensions
	DirectUrlSettings_PAD DirectUrlSettings_FitMode = 3
)

// Enum value maps for DirectUrlSettings_FitMode.
var (
	DirectUrlSettings_FitMode_name = map[int32]string{
		0: "SCALE",
		1: "STRETCH",
		2: "CROP",
		3: "PAD",
	}
	DirectUrlSettings_FitMode_value = map[string]int32{
		"SCALE":   0,
		"STRETCH": 1,
		"CROP":    2,
		"PAD":     3,
	}
)

func (x DirectUrlSettings_FitMode) Enum() *DirectUrlSettings_FitMode {
	p := new(DirectUrlSettings_FitMode)
	*p = x
	return p
}

func (x DirectUrlSettings_FitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectUrlSettings_FitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_directurls_proto_enumTypes[1].Descriptor()
}

func (DirectUrlSettings_FitMode) Type() protoreflect.EnumType {
	return &file_directurls_proto_enumTypes[1]
}

func (x DirectUrlSettings_FitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectUrlSettings_FitMode.Descriptor instead.
func (DirectUrlSettings_FitMode) EnumDescriptor() ([]byte, []int) {
	return file_directurls_proto_rawDescGZIP(), []int{0, 1}
}

// Allows specification of the file returned via a Direct URL.
type DirectUrlSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sigma value for Gaussian blur
	Blur *wrappers.Int64Value `protobuf:"bytes,7,opt,name=blur,proto3" json:"blur,omitempty"`
	// Details of a crop to apply
	Crop *DirectUrlSettings_CropSettings `protobuf:"bytes,4,opt,name=crop,proto3" json:"crop,omitempty"`
	// If true, this changes the content-type to application/x-force-download and forces browsers to trigger a download.
	Download *wrappers.BoolValue `protobuf:"bytes,13,opt,name=download,proto3" json:"download,omitempty"`
	// DPI for output image
	Dpi *wrappers.Int64Value `protobuf:"bytes,8,opt,name=dpi,proto3" json:"dpi,omitempty"`
	// Specify a filename to append to the URL (defaults to original file name)
	Filename *wrappers.StringValue `protobuf:"bytes,10,opt,name=filename,proto3" json:"filename,omitempty"`
	// the desired method of resolving aspect ratio differences between the requested input and output
	Fit DirectUrlSettings_FitMode `protobuf:"varint,5,opt,name=fit,proto3,enum=chorus.DirectUrlSettings_FitMode" json:"fit,omitempty"`
	// Format code for requested file format
	Format DirectUrlSettings_FileFormat `protobuf:"varint,3,opt,name=format,proto3,enum=chorus.DirectUrlSettings_FileFormat" json:"format,omitempty"`
	// Height of output file in pixels
	Height *wrappers.Int64Value `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	// the page number to download, should be zero-indexed (e.g. the first page is '0'). Except when downloading the original, this will default to '0'
	Page *wrappers.Int64Value `protobuf:"bytes,11,opt,name=page,proto3" json:"page,omitempty"`
	// A quality parameter for lossy formats like JPEG - accepted range 60-99, default is 85. Smaller parameters yield smaller filesize but lower fidelity
	Quality *wrappers.Int64Value `protobuf:"bytes,12,opt,name=quality,proto3" json:"quality,omitempty"`
	// Rotation angle in degrees
	Rotate *wrappers.Int64Value `protobuf:"bytes,6,opt,name=rotate,proto3" json:"rotate,omitempty"`
	// Width of output file in pixels
	Width *wrappers.Int64Value `protobuf:"bytes,1,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *DirectUrlSettings) Reset() {
	*x = DirectUrlSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_directurls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectUrlSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectUrlSettings) ProtoMessage() {}

func (x *DirectUrlSettings) ProtoReflect() protoreflect.Message {
	mi := &file_directurls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectUrlSettings.ProtoReflect.Descriptor instead.
func (*DirectUrlSettings) Descriptor() ([]byte, []int) {
	return file_directurls_proto_rawDescGZIP(), []int{0}
}

func (x *DirectUrlSettings) GetBlur() *wrappers.Int64Value {
	if x != nil {
		return x.Blur
	}
	return nil
}

func (x *DirectUrlSettings) GetCrop() *DirectUrlSettings_CropSettings {
	if x != nil {
		return x.Crop
	}
	return nil
}

func (x *DirectUrlSettings) GetDownload() *wrappers.BoolValue {
	if x != nil {
		return x.Download
	}
	return nil
}

func (x *DirectUrlSettings) GetDpi() *wrappers.Int64Value {
	if x != nil {
		return x.Dpi
	}
	return nil
}

func (x *DirectUrlSettings) GetFilename() *wrappers.StringValue {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *DirectUrlSettings) GetFit() DirectUrlSettings_FitMode {
	if x != nil {
		return x.Fit
	}
	return DirectUrlSettings_SCALE
}

func (x *DirectUrlSettings) GetFormat() DirectUrlSettings_FileFormat {
	if x != nil {
		return x.Format
	}
	return DirectUrlSettings_ORIGINAL
}

func (x *DirectUrlSettings) GetHeight() *wrappers.Int64Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *DirectUrlSettings) GetPage() *wrappers.Int64Value {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DirectUrlSettings) GetQuality() *wrappers.Int64Value {
	if x != nil {
		return x.Quality
	}
	return nil
}

func (x *DirectUrlSettings) GetRotate() *wrappers.Int64Value {
	if x != nil {
		return x.Rotate
	}
	return nil
}

func (x *DirectUrlSettings) GetWidth() *wrappers.Int64Value {
	if x != nil {
		return x.Width
	}
	return nil
}

// The settings to use for cropping a file.
type DirectUrlSettings_CropSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height, in pixels, of the area to crop.
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Width, in pixels, of the area to crop.
	Width int64 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// Pixel on the `x` axis in which to start the crop.
	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	// Pixel on the `y` axis in which to start the crop.
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *DirectUrlSettings_CropSettings) Reset() {
	*x = DirectUrlSettings_CropSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_directurls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectUrlSettings_CropSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectUrlSettings_CropSettings) ProtoMessage() {}

func (x *DirectUrlSettings_CropSettings) ProtoReflect() protoreflect.Message {
	mi := &file_directurls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectUrlSettings_CropSettings.ProtoReflect.Descriptor instead.
func (*DirectUrlSettings_CropSettings) Descriptor() ([]byte, []int) {
	return file_directurls_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DirectUrlSettings_CropSettings) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DirectUrlSettings_CropSettings) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DirectUrlSettings_CropSettings) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DirectUrlSettings_CropSettings) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_directurls_proto protoreflect.FileDescriptor

var file_directurls_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x75, 0x72, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x06, 0x0a, 0x11, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6c, 0x75,
	0x72, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x12, 0x36, 0x0a,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x64, 0x70, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x64, 0x70, 0x69, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x03, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x66, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x1a, 0x58, 0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x79,
	0x22, 0x47, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4a, 0x50, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x46, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x49, 0x46, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x05, 0x22, 0x34, 0x0a, 0x07, 0x46, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x54, 0x52, 0x45, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x44, 0x10, 0x03, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_directurls_proto_rawDescOnce sync.Once
	file_directurls_proto_rawDescData = file_directurls_proto_rawDesc
)

func file_directurls_proto_rawDescGZIP() []byte {
	file_directurls_proto_rawDescOnce.Do(func() {
		file_directurls_proto_rawDescData = protoimpl.X.CompressGZIP(file_directurls_proto_rawDescData)
	})
	return file_directurls_proto_rawDescData
}

var file_directurls_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_directurls_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_directurls_proto_goTypes = []interface{}{
	(DirectUrlSettings_FileFormat)(0),      // 0: chorus.DirectUrlSettings.FileFormat
	(DirectUrlSettings_FitMode)(0),         // 1: chorus.DirectUrlSettings.FitMode
	(*DirectUrlSettings)(nil),              // 2: chorus.DirectUrlSettings
	(*DirectUrlSettings_CropSettings)(nil), // 3: chorus.DirectUrlSettings.CropSettings
	(*wrappers.Int64Value)(nil),            // 4: google.protobuf.Int64Value
	(*wrappers.BoolValue)(nil),             // 5: google.protobuf.BoolValue
	(*wrappers.StringValue)(nil),           // 6: google.protobuf.StringValue
}
var file_directurls_proto_depIdxs = []int32{
	4,  // 0: chorus.DirectUrlSettings.blur:type_name -> google.protobuf.Int64Value
	3,  // 1: chorus.DirectUrlSettings.crop:type_name -> chorus.DirectUrlSettings.CropSettings
	5,  // 2: chorus.DirectUrlSettings.download:type_name -> google.protobuf.BoolValue
	4,  // 3: chorus.DirectUrlSettings.dpi:type_name -> google.protobuf.Int64Value
	6,  // 4: chorus.DirectUrlSettings.filename:type_name -> google.protobuf.StringValue
	1,  // 5: chorus.DirectUrlSettings.fit:type_name -> chorus.DirectUrlSettings.FitMode
	0,  // 6: chorus.DirectUrlSettings.format:type_name -> chorus.DirectUrlSettings.FileFormat
	4,  // 7: chorus.DirectUrlSettings.height:type_name -> google.protobuf.Int64Value
	4,  // 8: chorus.DirectUrlSettings.page:type_name -> google.protobuf.Int64Value
	4,  // 9: chorus.DirectUrlSettings.quality:type_name -> google.protobuf.Int64Value
	4,  // 10: chorus.DirectUrlSettings.rotate:type_name -> google.protobuf.Int64Value
	4,  // 11: chorus.DirectUrlSettings.width:type_name -> google.protobuf.Int64Value
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_directurls_proto_init() }
func file_directurls_proto_init() {
	if File_directurls_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_directurls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectUrlSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_directurls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectUrlSettings_CropSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_directurls_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_directurls_proto_goTypes,
		DependencyIndexes: file_directurls_proto_depIdxs,
		EnumInfos:         file_directurls_proto_enumTypes,
		MessageInfos:      file_directurls_proto_msgTypes,
	}.Build()
	File_directurls_proto = out.File
	file_directurls_proto_rawDesc = nil
	file_directurls_proto_goTypes = nil
	file_directurls_proto_depIdxs = nil
}
