// This is a generated file, please do not edit by hand
package chorus

import (
	"context"

	"github.com/third-light/go-grpc-client/chorus/authdetailstype"
	pb "github.com/third-light/go-grpc-client/protobuf"
	"google.golang.org/grpc"
)

// AuthDetails details about the currently authenticated user.
type AuthDetails struct {
	// UserId the id of the user. This will be null for non-authenticated users.
	UserId string
	// UserType the type of the user.
	UserType authdetailstype.AuthDetailsType
}

// AuthRequests
type AuthRequests struct {
}

// AuthRequestsGetAuthDetails
type AuthRequestsGetAuthDetails struct {
}

// AuthRequestsLogin
type AuthRequestsLogin struct {
	// Password the user account's password
	Password string
	// Username the user account's username
	Username string
}

// AuthRequestsLoginWithKey
type AuthRequestsLoginWithKey struct {
	// ApiKey an API key generated by Chorus.
	ApiKey string
}

// AuthRequestsLogout
type AuthRequestsLogout struct {
}

// AuthResponses
type AuthResponses struct {
}

// AuthResponsesLogout
type AuthResponsesLogout struct {
}

// LoginDetails response of a login method for normal users. This contains details of the user that has logged in.
type LoginDetails struct {
	// SessionId the new/updated session ID for further use
	SessionId string
	// UserDetails user details for the logged in user
	UserDetails UserDetails
}

// AuthClient is the Auth client
type AuthClient struct {
	pb pb.AuthClient
}

// NewAuthClient returns a new AuthClient created from supplied gRPC ClientConn
func NewAuthClient(cc *grpc.ClientConn) *AuthClient {
	return &AuthClient{
		pb: pb.NewAuthClient(cc),
	}
}

// GetAuthDetails returns details about the currently active user.
func (c *AuthClient) GetAuthDetails(in *AuthRequestsGetAuthDetails) (*AuthDetails, error) {
	return c.GetAuthDetailsWithContext(context.Background(), in)
}

// GetAuthDetailsWithContext returns details about the currently active user.
func (c *AuthClient) GetAuthDetailsWithContext(ctx context.Context, in *AuthRequestsGetAuthDetails) (*AuthDetails, error) {
	out, err := c.pb.GetAuthDetails(ctx, convertFromAuthRequestsGetAuthDetailsPtr(in))
	if err != nil {
		return nil, err
	}
	return convertToAuthDetailsPtr(out), nil
}

// Login to Chorus using a supplied username and password.
// This method should only be used if you're allowing users to login using their Chorus username and password.
// **The usernames and passwords must not be persistently stored and should be requested for each login. Use API
// Keys, and `LoginWithKey` if you require persistent user access.**
func (c *AuthClient) Login(in *AuthRequestsLogin) (*LoginDetails, error) {
	return c.LoginWithContext(context.Background(), in)
}

// LoginWithContext to Chorus using a supplied username and password.
// This method should only be used if you're allowing users to login using their Chorus username and password.
// **The usernames and passwords must not be persistently stored and should be requested for each login. Use API
// Keys, and `LoginWithKey` if you require persistent user access.**
func (c *AuthClient) LoginWithContext(ctx context.Context, in *AuthRequestsLogin) (*LoginDetails, error) {
	out, err := c.pb.Login(ctx, convertFromAuthRequestsLoginPtr(in))
	if err != nil {
		return nil, err
	}
	return convertToLoginDetailsPtr(out), nil
}

// LoginWithKey login to Chorus using an API Key.
func (c *AuthClient) LoginWithKey(in *AuthRequestsLoginWithKey) (*LoginDetails, error) {
	return c.LoginWithKeyWithContext(context.Background(), in)
}

// LoginWithKeyWithContext login to Chorus using an API Key.
func (c *AuthClient) LoginWithKeyWithContext(ctx context.Context, in *AuthRequestsLoginWithKey) (*LoginDetails, error) {
	out, err := c.pb.LoginWithKey(ctx, convertFromAuthRequestsLoginWithKeyPtr(in))
	if err != nil {
		return nil, err
	}
	return convertToLoginDetailsPtr(out), nil
}

// Logout ends the IMS user session.
func (c *AuthClient) Logout(in *AuthRequestsLogout) (*AuthResponsesLogout, error) {
	return c.LogoutWithContext(context.Background(), in)
}

// LogoutWithContext ends the IMS user session.
func (c *AuthClient) LogoutWithContext(ctx context.Context, in *AuthRequestsLogout) (*AuthResponsesLogout, error) {
	out, err := c.pb.Logout(ctx, convertFromAuthRequestsLogoutPtr(in))
	if err != nil {
		return nil, err
	}
	return convertToAuthResponsesLogoutPtr(out), nil
}
